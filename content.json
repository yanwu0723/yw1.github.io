{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"YW","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"记近期电脑设备升级一事（测试）","date":"2018-01-14T09:58:36.676Z","updated":"2018-01-14T09:58:36.883Z","comments":true,"path":"2018/01/14/记近期电脑设备升级一事（测试）/","link":"","permalink":"http://yoursite.com/2018/01/14/记近期电脑设备升级一事（测试）/","excerpt":"","text":"十一月真是一个忙碌的季节，电商平台携商家精心布局撒网等鱼入网，买家手握巨款蠢蠢欲动，物流赶忙提升内容分发系统的高效性与健壮性，一副生机勃勃的画面。作为不怎么热衷购物的我在这番阵势下也激动的跃跃欲试，为了做好热身运动，我提前升级了下电脑设备。那买买买的节奏可谓十分轻快明朗，让人欲罢不能。钱要花在刀刃上，这是我获得的人生的第二条真谛，还挺早获得的，就是执行力不够。我把这个错误归结为冲动的欲望在作祟，但很明显是自我欺骗，显然应该怪商家太会营销打广告。 闭嘴，一手交钱一手交货闭嘴，一手交钱一手交货 常话说的好，高富玩表，土豪玩车，屌丝玩电脑。作为一名屌丝中的战斗机，那电脑必须玩得溜。人生真谛第三条，既然决定做一件事情，就把这叫事情做好，无关贫富贵贱，此乃工匠本色。看着那些陪伴多年，依然坚守岗位默默奋斗的电子设备，我想是时候了，是时候来个咸鱼翻身，再扑腾一阵子。 第一件物品 SSD。早有耳闻说 SSD 如何如何的快，快到足够让旧设备重新焕发青春。这对于没有钱买新 MacBook Pro 的我来说，简直是福音。市场上 SSD 产品可谓琳琅满目，各有各的特色，加上各路神仙尽显巧舌之簧，这无疑对作为资深选择困难户的我是一种巨大的挑战。在咖啡提神，两眼放光如狼似虎的地毯式搜索以后，我选定了两个品牌：浦科特与英特尔。为什么选这两个，这其中的细节可以再写一万字，不再赘述。最后，英特尔 战胜了 浦科特，装逼还是得 Intel inside。 就在我为自己的英明抉择佩服不已的时候，剧情发生了 360 ℃ 反转。猴急猴急测试 SSD 性能的时候，我发现我那款 MacBook Pro 只有 SATA 3GbitS，这意味着要降低将近一半的速度在跑。早知如此，何必买那么好的，耽误人家 SSD 的青春。犯下如此低端错误，实在有丢我高端风格的脸，为此我忧伤颓废了 72 小时。为了治愈这直触心灵的创伤，我把注意力转移到了显示器上。 2009 年夏秋交换之时，我买了一台 Dell 22 吋的 UltraSharp 2208WFP。而随后几个月似乎大屏液晶显示器价格开始下滑，尽管如此，我还是觉得当时买这台显示器是很正确的选择。在此之前使用的是那种很笨重的纯平显示器。在点亮 2208 显示器的那一刻，我眼泪禁不住留了下来，这要早点买，说不定我代码就不会写那么差了。不过，后来事实证明，这两者之间没有太大的关系，因为我都用这个显示器去看 火影村忍者的搞基历程 和 王路飞当海贼 的连续剧了。从 17 吋 1024 x 768 的分辨率升级到 22 吋的 1680 x 1050 ，那效果还是相当震撼的。所以，对于购买显示器我已然有一个黄金标准，就是屏幕要大，分辨率要高，其他的不重要（商家就喜欢我这种用户）。 鉴于 2208 仍在服役，我对 Dell 的质量还是很放心，所以这次依然购买了 Dell，型号 U2515H。为了掩饰更高级的买不起的事实，我把 U2515H 的优点放大了 2515 倍，什么字距小容易眨眼之类的描述一概忽略，买的心安理得。只是在 Dell 官网购买的过程有点小波折，那酸爽体验岂是三言两语能言尽。那是一个复古风 2000 年左右的互联网网站。我一路过关斩将、千辛万苦到达付款页面，最后跪在了使用信用卡付款的路上，世上竟然有如此套路复杂的支付招式，在下跪的心服口服。庆幸的是，还有支付宝可以便利地付款，虽然我不用支付宝。 注册帐号，付完款之后发现账户页面找不到任何订单。在 Google Chrome 浏览器下还一直发生“此页面包含循环重定向” 这种不明所以的错误。这种时候，我想到了 IE 浏览器。哎？真的可以哎，原来 IE 除了制造各种疑难杂症，还会治，双 Zhi 齐下。这让我对 IE 的印象完全改观，然后继续用 Google Chrome。至于这个问题背后的黑科技我就暂时忽略了，买台显示器的时候买到后面在查 Bug 显然有点太专业了（代码写的不好看来跟这个态度有关系）。但是，迷之订单迟迟没有出现。 好吧，既然如此，我再等三分钟看看。好吧，既然如此，我就再等三十分钟好吧，既然如此，我就再等三个小时。 好吧…作为一名每天堆砌文字符号兼复制粘贴的软件工作者的我相当的不淡定了，你们这么弄真的好吗？我只是想买一个显示器啊，我为了便宜两百块不上京东买我就错了吗？然后，我收到了邮件，一查原来 Dell 有这种线下销售的模式。被其他电商长期溺宠的我表示很不习惯。订单没法看，物流没法查，那种翘首以待的购物乐趣何在呢？庆幸的是，从下单到收货，只用了三天不到。原来 Dell 是要给我惊喜，呵呵。 到货后，依然猴急的拆箱装上。网上很多拆箱晒照，我想应该有免费的可以借用吧（请尊重原创）。所以那张照片不是我拍的（出处）。迅速接上 MacBook Pro，自带 Mini DisplayPort - DisplayPort 的线正符合条件。可以啊，这下代码水平又能提高不少了，然后点开了 《千与千寻》，真是百看不厌的名作啊…哎？试试 LOL，会不会视野更开阔些，不容易被 Gank 呢？嗯，代码什么的有时间再说吧… 屏幕大了，设备速度快了，然后硬盘容量不够了。一部电影就好几个 G，SSD 那么点容量分分钟被撑爆。听说拆光驱换硬盘这套狸猫换太子的手法可以扩容，我就去淘宝买了一个光驱支架。对于一个为折腾而生的人来说，替换光驱支架那都不是个事。换了以后，把一些只能在三更半夜夜深人静的时候看的东西，果断移到了机械硬盘上。 如此一番，除了荷包渐瘦以外，其他都到位了。那么，热身完毕，就等双十一开战了。战场上见。","categories":[],"tags":[]},{"title":"","slug":"NexT Documentations Reload","date":"2018-01-14T09:57:22.063Z","updated":"2018-01-14T09:57:22.287Z","comments":true,"path":"2018/01/14/NexT Documentations Reload/","link":"","permalink":"http://yoursite.com/2018/01/14/NexT Documentations Reload/","excerpt":"","text":"尽管简单易用一直是 NexT 主题的首要目标，但现实与想法总是有那么一个缝隙，难怪有人说诗要源于生活后低于生活，着实有着深刻的哲学道理。那么无论这背后是什么样的原因导致，总结起来就是 NexT 不好用。在初期使用者比较少的情况，还可以有耐心的一个个解答；后来发现一直在回答类似的问题，加上要做和想做的事情太多而无暇顾及，于是就想写一份文档缓和一下这个问题。 前季剧情回顾 起先，我使用 Hexo 搭建了第一版的 NexT 使用文档站点。UI 框架选择的是 Semantic UI，并且新建了一个主题称为 Luminosa。然而我发现要在 Markdown 里使用 Semantic UI 的组件有点麻烦，以及 Hexo 在解析 Markdown 时会自动加上很多空行的问题。不得已之下，只能创建了几个 Tag Plugins 封装了一下使用到的 Semantic UI 的组件。 这也就解释了为什么在使用了 Semantic UI 的情况下，整体界面依然如此的粗糙与潦草，因为我把时间都花在写 Plugin 上了。至于文档的质量，早就被忘记在春天的田野里了。夏天是个愉快的季节，毕竟是 Sunshine 与比基尼同在的日子，文档的事情就别提了（我记得有一位热心的用户曾给 Docs 发过一个 PR，我没有 merge，在此说下抱歉）。然而时间就是个无情的戏子，夏天的风景还没看够就火急火燎地带来了秋天。秋天是文人墨客各领风骚的季节，到处是寂寞与沧桑，就在这样一个浮躁的季节里，我回头看了下文档，深刻地意识到只有呵呵能表达我对自己直触灵魂的佩服。 短期计划乱入 那么，经过一个工作忙碌周期后得已有些空闲时间，就把最近的空闲时间花在重新制作与编写 NexT 文档。目前的计划是，近期发布一个 Release 出去，版本号从 0.4 直接升级到 5.0.0（紧随 Facebook 大法脚步）。这个 Release 主要包含的是 Pisces Scheme ，修复 Pisces 引入的 Bug 以及更新文档。在此以后应该有一个小的更新，主要解决 Issues 里反馈的 Bug。再下一步是侧栏的重写，以及图片展示（这玩意一直搁着）。短期计划差不多就这样。 文档的重装上阵 说回文档。有了第一版的经验，第二版就决定不再使用 Hexo 了。在 Markdown 里写大段的 HTML 代码，干脆就直接写 HTML 代码好了，除了要多写一些结构性标签以外（其实很多），写 HTML 还是比较直接。这样得到的好处是内容层比较好控制后，外观和行为也就没有什么障碍。 第二版选择了 Bootstrap 作为 UI 框架，使用 Nunjucks 模板引擎，Sass 预处理语言以及 Gulp 构建工具。起初技术栈没这么有档次的感觉，我只想好好的写份文档，但到写第三个页面时，实在受不了了每次都要复制头尾相同的文档内容，这万一要改下这公共的内容，那就不能好好的写文档了。 于是就引入了 Nunjucks。而使用一个模板引擎的话，就得解决从模板生成页面的问题，这个问题包括开发过程以及部署代码生成过程。幸运的是，这个问题并不难。使用 Nunjucks 的 API 生成一个 Renderer，而后这个 Renderer 可以用在 BrowserSync 的中间件中以及 Gulp 的部署生成任务中。顺利地解决了模板渲染的问题。所以，文档绝大多数内容都是 HTML 代码，唯一的例外是代码片段。考虑到在 HTML 中书写 HTML 源代码要对大量的 &lt; 以及 &gt; 做转换，所以我增加了一个 code 的标签，用来快速的插入代码片段。 插个广告，安利下 BrowserSync 这个神器，自动刷新、多设备同步、中间件支持、Proxy 支持，真是前端开发必备神器，谁用谁知道。我曾在一个项目中使用 Grunt 做双重 Watcher，第一重 Watcher 用于监听源码的改动并生成预部署的代码；第二重 Watcher 监听预部署的代码并部署代码到应用程序容器下。使用 BrowserSync 后只要一个 Watcher 加 Proxy 即可轻松解决这个场景的需求。自从用了 BrowserSync，感觉一下子年轻了好几岁，爬楼都有劲了（超过时的广告文案）。 大体框架搞定后就是文档内容了。我花了点时间重新润色了下当前已有文档的内容，争取把每一个点都详细的写明，目前仍在继续撰写中（「撰写」这个词很有力度，直接表明了写文档的难度系数极高）。然后发现 NexT 包含了很多特性，有些我也没有在使用。所以如果你有看到有遗漏的不妨访问 NexT 文档发个 Issue，或者 Pull Request 更赞。","categories":[],"tags":[]},{"title":"","slug":"使用 Travis CI 自动更新 GitHub Pages","date":"2018-01-14T09:54:33.661Z","updated":"2018-01-14T09:54:33.889Z","comments":true,"path":"2018/01/14/使用 Travis CI 自动更新 GitHub Pages/","link":"","permalink":"http://yoursite.com/2018/01/14/使用 Travis CI 自动更新 GitHub Pages/","excerpt":"","text":"每次更改完 NexT 文档 都要手动部署到 GitHub Pages，重复的次数多了就显得很麻烦，出错的几率也会变大。文档源码放置在 master 分支，最终部署文件在 gh-pages 分支。当在 master 分支更改某些内容之后，通过运行 gulp dist 来生成最终部署的 HTML 文件到 dist 目录，随后再进入 dist 目录初始化 git 仓库、添加文件、提交文件，最后将提交强制推送到远程 gh-pages 分支（因当心我会误将最终部署的 HTML 文件提交到 master 分支导致源码丢失，我在 GitHub 上把 master 分支给锁定了）。除此之外还有另外一个问题：如果 master 分支有 Pull Requests，我需要先将更新取回本地，然后编译更新再提交回远程 gh-pages 分支。","categories":[],"tags":[]}]}